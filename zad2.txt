#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>


struct Node {
    int data;
    struct Node *next;
};


 struct Node* initList();
 void addToEnd(struct Node *head, int data);
 void printList(struct Node* head);
 void removeNode(struct Node* head, int target);
 void addAfter(struct Node* head, int data, int target);
 bool removeFromIndex(struct Node *head, int index);
 void insertAtIndex(struct Node *head, int index, int data);
 void sortList(struct Node* head);
 
int main()
{
   struct Node *head = initList();
   int temp, temp2;
   int pos, ch;
   char g;

   
do {
    printf("\n Menu");
    printf("\n 1.Add element \n 2.Print list \n 3.Insert element on index \n 4.Insert element after other element in list \n 5.Remove element from index \n 6.Remove element \n 7.Sort elements ascedning \n 8.Exit \n");
    printf("\n Pick an option: ");
    scanf("%d", & ch);

    switch (ch) {
    case 1:
      fflush(stdin);
      printf("\n Insert element: ");
      scanf("%d", &temp);
      addToEnd( head, temp);
      break;

    case 2:
      printList(head);
      break;

    case 3:
      fflush(stdin);
      printf("\n Insert element: ");
      scanf("%d", & temp);
      printf("\n Insert index on which you want to place new element: ");
      scanf("%d", & pos);
      insertAtIndex( head, pos, temp);
      break;

    case 4:
      fflush(stdin);
      printf("\n Insert new element: ");
      scanf("%d", & temp);
      printf("\n Insert element after which you want to place new element: ");
      scanf("%d", & temp2);
      addAfter( head, temp2, temp);
      break;

    case 5:
      printf("\n Insert index from which you want to delete element: ");
      scanf("%d", & pos);
      removeFromIndex( head, pos);
      break;

    case 6:
      printf("\n Insert element which you want to delete: ");
      fflush(stdin);
      scanf("%d", & temp);
      removeNode( head, temp);
      break;

    case 7:
      sortList( head);
      break;

    case 8:
      exit(1);
      break;
      

    default:
      printf("\n\n Wrong input");
      break;
    }
    printf("\n Do you want to continiue? y or n\n");
    scanf("\n%c", & g);
  }while (g == 'y' || g == 'Y');

  
   return 0;
}

struct Node* initList() {
    struct Node *head = (struct Node*) malloc(sizeof(struct Node));
    head->next = NULL;
    return head;
}


void addToEnd(struct Node *head, int data) {
    struct Node *newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    struct Node *current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
}


void printList(struct Node* head) {
    struct Node* current = head->next;
    if(current==NULL){
        printf("List is empty");
    }
    while (current != NULL) {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}




void removeNode(struct Node* head, int target) {
    struct Node* current = head, *prev;
    if (current != NULL && current->data == target) {
        head = current->next;
        free(current);
        return;
    }
    while (current != NULL && current->data != target) {
        prev = current;
        current = current->next;
    }
    if (current == NULL) {
        return;
    }
    prev->next = current->next;
    free(current);
}

bool removeFromIndex(struct Node *head, int index) {
    struct Node *current = head;
    for (int i = 0; i < index; i++) {
        if (current->next == NULL) {
            return false;
        }
        current = current->next;
    }
    struct Node *temp = current->next;
    current->next = current->next->next;
    free(temp);
    return true;
}



void addAfter(struct Node* head, int data, int target) {
    struct Node* current = head;
    while (current != NULL) {
        if (current->data == target) {
            struct Node* newNode = (struct Node*) malloc(sizeof(struct Node));
            newNode->data = data;
            newNode->next = current->next;
            current->next = newNode;
            break;
        }
        current = current->next;
    }
}


void insertAtIndex(struct Node *head, int index, int data) {
    struct Node *current = head;
    for (int i = 0; i < index; i++) {
        if (current->next == NULL) {
            return;
        }
        current = current->next;
    }
    struct Node *newNode = (struct Node*) malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = current->next;
    current->next = newNode;
}

void sortList(struct Node* head) {
    struct Node *i, *j;
    int temp;
    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}










