#include <stdio.h>

#include <stdlib.h>

#include <string.h>

#include <stdbool.h>

#define MAX_SIZE 100


void insertAtEnd(int data, int *current_size, int array[]);
void printArray(int current_size, int array[]);
void insertAfter(int existing, int data, int *current_size, int array[]);
void insertAtIndex(int index, int data, int *current_size, int array[]);
void removeFromIndex(int index, int *current_size, int array[]);
void removeAfter(int existing, int *current_size, int array[]);
void sortArray(int current_size, int array[]);

int main() {
  int array[MAX_SIZE];
  int current_size = 0;
  int temp, temp2;
  int pos, ch;
  char g;


  do {
    printf("\n Menu");
    printf("\n 1.Add element \n 2.Print list \n 3.Insert element on index \n 4.Insert element after other element in list \n 5.Remove element from index \n 6.Remove element behind other element in list \n 7.Sort elements ascedning \n 8.Exit \n");
    printf("\n Pick an option: ");
    scanf("%d", & ch);

    switch (ch) {
    case 1:
      fflush(stdin);
      printf("\n Insert element: ");
      scanf("%d", & temp);
      insertAtEnd(temp,&current_size,array);
      break;

    case 2:
      printArray(current_size,array);
      break;

    case 3:
      fflush(stdin);
      printf("\n Insert element: ");
      scanf("%d", & temp);
      printf("\n Insert index on which you want to place new element: ");
      scanf("%d", & pos);
      insertAtIndex(pos, temp,&current_size,array);
      break;

    case 4:
      fflush(stdin);
      printf("\n Insert new element: ");
      scanf("%d", & temp);
      printf("\n Insert element after which you want to place new element: ");
      fflush(stdin);
      printf("\n Insert existing element: ");
      scanf("%d", & temp2);
      insertAfter(temp2, temp,&current_size,array);
      break;

    case 5:
      printf("\n Insert index from which you want to delete element: ");
      scanf("%d", & pos);
      removeFromIndex( pos,&current_size,array);
      break;

    case 6:
      printf("\n Insert element behind which you want to delete element: ");
      fflush(stdin);
      printf("\n Insert existing element: ");
      scanf("%d", & temp);
      removeAfter(temp,&current_size,array);
      break;

    case 7:
      sortArray(current_size,array);
      break;

    case 8:
      exit(1);
      break;

    default:
      printf("\n\n Wrong input");
      break;
    }
    printf("\n Do you want to continiue? y or n\n");
    scanf("\n%c", & g);
  }while (g == 'y' || g == 'Y');
  getch();

  return 0;
}
void insertAtEnd(int data, int *current_size, int array[]) {
    if (*current_size < MAX_SIZE) {
        array[*current_size] = data;
        (*current_size)++;
    }
}


void insertAtIndex(int index, int data, int *current_size, int array[]) {
    if (index < *current_size && *current_size < MAX_SIZE) {
        for (int i = *current_size; i > index; i--) {
            array[i] = array[i - 1];
        }
        array[index] = data;
        (*current_size)++;
    }
}

void insertAfter(int existing, int data, int *current_size, int array[]) {
    for (int i = 0; i < *current_size; i++) {
        if (array[i] == existing) {
            if (*current_size < MAX_SIZE) {
                for (int j = *current_size; j > i+1; j--) {
                    array[j] = array[j - 1];
                }
                array[i+1] = data;
                (*current_size)++;
            }
            break;
        }
    }
}

void removeFromIndex(int index, int *current_size, int array[]) {
    if (index < *current_size) {
        for (int i = index; i < *current_size - 1; i++) {
            array[i] = array[i + 1];
        }
        (*current_size)--;
    }
}

void removeAfter(int existing, int *current_size, int array[]) {
    for (int i = 0; i < *current_size; i++) {
        if (array[i] == existing) {
            if (i+1 < *current_size) {
                for (int j = i+1; j < *current_size-1; j++) {
                    array[j] = array[j + 1];
                }
                (*current_size)--;
            }
            break;
        }
    }
}

void sortArray(int current_size, int array[]) {
    for (int i = 0; i < current_size - 1; i++) {
        for (int j = 0; j < current_size - i - 1; j++) {
            if (array[j] > array[j + 1]) {
                int temp = array[j];
                array[j] = array[j + 1];
                array[j + 1] = temp;
            }
        }
    }
}

void printArray(int current_size, int array[]) {
    for (int i = 0; i < current_size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
}




